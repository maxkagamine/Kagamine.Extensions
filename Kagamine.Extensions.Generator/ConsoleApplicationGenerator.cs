// Copyright (c) Max Kagamine
// Licensed under the Apache License, Version 2.0

using Microsoft.CodeAnalysis;
using System.Text;

namespace Kagamine.Extensions.Generator;

[Generator]
public class ConsoleApplicationGenerator : ISourceGenerator
{
    public void Execute(GeneratorExecutionContext context)
    {
        var source = new StringBuilder();

        source.AppendLine("// <auto-generated/>");
        source.AppendLine("using Microsoft.Extensions.DependencyInjection;");
        source.AppendLine("using System.ComponentModel;");
        source.AppendLine();
        source.AppendLine("namespace Kagamine.Extensions.Hosting;");
        source.AppendLine();
        source.AppendLine("[EditorBrowsable(EditorBrowsableState.Never)]");
        source.AppendLine("public static class ConsoleApplicationExtensions");
        source.AppendLine("{");

        for (int paramCount = 0; paramCount < 15; paramCount++) // One less than max as we always pass CancellationToken
        {
            if (paramCount > 0)
            {
                source.AppendLine(CreateHostExtension(paramCount, false, false)); // Action<...>
            }

            source.AppendLine(CreateHostExtension(paramCount, false, true)); // Func<..., int>
            source.AppendLine(CreateHostExtension(paramCount, true, false)); // Func<..., Task>
            source.AppendLine(CreateHostExtension(paramCount, true, true)); // Func<..., Task<int>>
        }

        for (int paramCount = 0; paramCount < 15; paramCount++)
        {
            source.AppendLine(CreateBuilderExtension(paramCount, false, false)); // Action<...>
            source.AppendLine(CreateBuilderExtension(paramCount, false, true)); // Func<..., int>
            source.AppendLine(CreateBuilderExtension(paramCount, true, false)); // Func<..., Task>
            source.AppendLine(CreateBuilderExtension(paramCount, true, true)); // Func<..., Task<int>>
        }

        source.AppendLine("}");

        context.AddSource("ConsoleApplicationExtensions.g.cs", source.ToString());
    }

    private static string[] StartMethod(StringBuilder method, string extend, int paramCount, bool isAsync, bool returnsInt)
    {
        // Define type parameters
        string[] typeParams = Enumerable.Range(1, paramCount).Select(i => $"T{i}").ToArray();
        string generic = paramCount == 0 ? "" : $"<{string.Join(", ", typeParams)}>";

        // Define delegate type
        string delegateBaseType = returnsInt || isAsync ? "Func" : "Action";
        string[] delegateReturnType = isAsync ? returnsInt ? ["Task<int>"] : ["Task"] : returnsInt ? ["int"] : [];
        string delegateParams = string.Join(", ", (IEnumerable<string>)[.. typeParams, "CancellationToken", .. delegateReturnType]);
        string delegateType = $"{delegateBaseType}<{delegateParams}>";

        // Descriptions can all be the same
        method.AppendLine("    /// <inheritdoc cref=\"ConsoleApplication.Run(Action{CancellationToken})\"/>");

        // Method signature
        method.AppendLine($"    public static void Run{generic}(this {extend}, {delegateType} action)");

        // Constraints
        foreach (string t in typeParams)
        {
            method.AppendLine($"        where {t} : notnull");
        }

        return typeParams;
    }

    private static string CreateHostExtension(int paramCount, bool isAsync, bool returnsInt)
    {
        var method = new StringBuilder();
        var typeParams = StartMethod(method, "ConsoleApplication app", paramCount, isAsync, returnsInt);
        method.AppendLine("    {");

        // Dependencies
        if (paramCount > 0)
        {
            method.AppendLine("        using var scope = app.Services.CreateScope();");

            foreach (string t in typeParams)
            {
                method.AppendLine($"        var {t.ToLowerInvariant()} = scope.ServiceProvider.GetRequiredService<{t}>();");
            }

            method.AppendLine();
        }

        // Wrap and execute delegate
        string args = string.Join(", ", (IEnumerable<string>)[.. typeParams.Select(t => t.ToLowerInvariant()), "cancellationToken"]);

        method.AppendLine("        app.Run(cancellationToken =>");
        method.AppendLine("        {");

        method.Append("            ");

        if (returnsInt)
        {
            method.Append("Environment.ExitCode = ");
        }

        method.Append($"action({args})");

        if (isAsync)
        {
            method.Append(".GetAwaiter().GetResult()");
        }

        method.AppendLine(";");
        method.AppendLine("        });");

        // Close method
        method.AppendLine("    }");

        return method.ToString();
    }

    private static string CreateBuilderExtension(int paramCount, bool isAsync, bool returnsInt)
    {
        var method = new StringBuilder();
        StartMethod(method, "ConsoleApplicationBuilder builder", paramCount, isAsync, returnsInt);

        method.AppendLine("    => builder.Build().Run(action);");

        return method.ToString();
    }

    public void Initialize(GeneratorInitializationContext context)
    { }
}
