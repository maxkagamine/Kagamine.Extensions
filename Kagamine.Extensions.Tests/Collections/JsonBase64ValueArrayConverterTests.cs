// Copyright (c) Max Kagamine
// Licensed under the Apache License, Version 2.0

using Kagamine.Extensions.Collections;
using System.Text.Json;

namespace Kagamine.Extensions.Tests.Collections;

public class JsonBase64ValueArrayConverterTests
{
    record Foo(ValueArray<Bar> Numbers, ValueArray<byte> Data);
    readonly record struct Bar(ushort A, ushort B, ushort C, ushort D);

    private static readonly JsonSerializerOptions Options = new()
    {
        Converters = { new JsonBase64ValueArrayConverter() },
        WriteIndented = true
    };

    private static readonly Foo ExpectedFoo = new(
        Numbers: [
            new(3, 9, 8, 31),  // The numbers, Mason!
            new(12, 27, 3, 9)  // What do they mean?!
        ],
        Data: Enumerable.Range(0, 1025).Select(_ => (byte)0).ToArray());

    private static readonly string ExpectedJson = """
        {
          "Numbers": "AwAJAAgAHwAMABsAAwAJAA==",
          "Data
        }
        """;

    [Fact]
    public void Read()
    {
        var actualFoo = JsonSerializer.Deserialize<Foo>(ExpectedJson, Options);
        Assert.Equal(ExpectedFoo, actualFoo);
    }

    [Fact]
    public void Write()
    {
        var actualJson = JsonSerializer.Serialize(ExpectedFoo, Options);
        Assert.Equal(ExpectedJson.ReplaceLineEndings(), actualJson.ReplaceLineEndings());
    }
}
